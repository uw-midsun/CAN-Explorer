name: CI

on:
  # Run on all pull requests and all pushes to main
  push:
    branches: [ main ]
  pull_request:

  # Allow running this workflow manually
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        node-version: [15.x]
        redis-version: [6]
        python-version: [3.6]
        mongodb-version: [4.4]
    steps:
      - uses: actions/checkout@v2

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install pipenv
        run: sudo -H pip3 install -U pipenv

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Redis Server in GitHub Actions
        uses: supercharge/redis-github-action@1.1.0
        with:
          redis-version: ${{ matrix.redis-version }}

      - name: Install MongoDB
        uses: supercharge/mongodb-github-action@1.3.0
        with:
          mongodb-version: ${{ matrix.mongodb-version }}
      
      - name: Start MongoDB
        run: sudo systemctl start mongod

      - name: Force PATH to update
        run: hash -r

      - name: Install vcan
        run: sudo apt-get install linux-modules-extra-$(uname -r)
      - name: Setup vcan
        run: sudo modprobe vcan && sudo ip link add dev vcan0 type vcan && sudo ip link set up vcan0

      - id: cache-pipenv
        uses: actions/cache@v2
        with:
          path: ~/.local/share/virtualenvs
          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}

      - name: Install backend dependencies 
        if: steps.cache-pipenv.outputs.cache-hit != 'true'
        run: cd api && pipenv install --dev

      # TODO find way to run without setting env var
      - name: Setup Django ENV var 
        run: echo "DJANGO_SETTINGS_MODULE=django_app.settings" >> $GITHUB_ENV
      - name: Backend Lint
        run: cd api && pipenv run lint
      - name: Backend tests
        run: cd api && pipenv run test


      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install frontend dependencies
        if: steps.cache-node-modules.outputs.cache-hit != 'true'
        run: cd client && npm ci
      - name: Frontend lint
        run: cd client && npm run lint
      - name: Frontend test
        run: cd client && npm run test


